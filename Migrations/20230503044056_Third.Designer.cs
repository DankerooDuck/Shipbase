// <auto-generated />
using System;
using GundamEvolutionDatabase.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GundamEvolutionDatabase.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230503044056_Third")]
    partial class Third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GameModeMap", b =>
                {
                    b.Property<int>("GameModesGameModeID")
                        .HasColumnType("int");

                    b.Property<int>("MapsMapID")
                        .HasColumnType("int");

                    b.HasKey("GameModesGameModeID", "MapsMapID");

                    b.HasIndex("MapsMapID");

                    b.ToTable("GameModeMap");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Ability", b =>
                {
                    b.Property<int>("AbilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbilityID"), 1L, 1);

                    b.Property<string>("AbilityAttributeData1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityAttributeData2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityAttributeData3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityAttributeName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityAttributeName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityAttributeName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Ultimate")
                        .HasColumnType("bit");

                    b.Property<int?>("UnitID")
                        .HasColumnType("int");

                    b.HasKey("AbilityID");

                    b.HasIndex("UnitID");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.GameMode", b =>
                {
                    b.Property<int>("GameModeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameModeID"), 1L, 1);

                    b.HasKey("GameModeID");

                    b.ToTable("GameModes");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Map", b =>
                {
                    b.Property<int>("MapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MapID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeasonID")
                        .HasColumnType("int");

                    b.HasKey("MapID");

                    b.HasIndex("SeasonID");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Season", b =>
                {
                    b.Property<int>("SeasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonID"), 1L, 1);

                    b.HasKey("SeasonID");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Unit", b =>
                {
                    b.Property<int?>("UnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UnitID"), 1L, 1);

                    b.Property<int?>("DashLimit")
                        .HasColumnType("int");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int?>("Health")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeasonID")
                        .HasColumnType("int");

                    b.Property<int?>("Shield")
                        .HasColumnType("int");

                    b.HasKey("UnitID");

                    b.HasIndex("SeasonID");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Weapon", b =>
                {
                    b.Property<int>("WeaponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeaponID"), 1L, 1);

                    b.Property<string>("AbilityAttributeData1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityAttributeData2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityAttributeName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbilityAttributeName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DamageBody")
                        .HasColumnType("int");

                    b.Property<int?>("DamageHead")
                        .HasColumnType("int");

                    b.Property<int?>("DamageLimb")
                        .HasColumnType("int");

                    b.Property<int?>("FallOffDistance")
                        .HasColumnType("int");

                    b.Property<int?>("MagazineSize")
                        .HasColumnType("int");

                    b.Property<int?>("ReloadTimeAlt")
                        .HasColumnType("int");

                    b.Property<int?>("ReloadTimeStandard")
                        .HasColumnType("int");

                    b.Property<int?>("UnitID")
                        .HasColumnType("int");

                    b.Property<string>("WeaponName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeaponSwitchTime")
                        .HasColumnType("int");

                    b.HasKey("WeaponID");

                    b.HasIndex("UnitID");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameModeMap", b =>
                {
                    b.HasOne("GundamEvolutionDatabase.Models.GameMode", null)
                        .WithMany()
                        .HasForeignKey("GameModesGameModeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GundamEvolutionDatabase.Models.Map", null)
                        .WithMany()
                        .HasForeignKey("MapsMapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Ability", b =>
                {
                    b.HasOne("GundamEvolutionDatabase.Models.Unit", null)
                        .WithMany("Abilities")
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Map", b =>
                {
                    b.HasOne("GundamEvolutionDatabase.Models.Season", null)
                        .WithMany("Maps")
                        .HasForeignKey("SeasonID");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Unit", b =>
                {
                    b.HasOne("GundamEvolutionDatabase.Models.Season", null)
                        .WithMany("Units")
                        .HasForeignKey("SeasonID");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Weapon", b =>
                {
                    b.HasOne("GundamEvolutionDatabase.Models.Unit", null)
                        .WithMany("Weapons")
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GundamEvolutionDatabase.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GundamEvolutionDatabase.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GundamEvolutionDatabase.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GundamEvolutionDatabase.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Season", b =>
                {
                    b.Navigation("Maps");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("GundamEvolutionDatabase.Models.Unit", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Weapons");
                });
#pragma warning restore 612, 618
        }
    }
}
